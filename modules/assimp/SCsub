#!/usr/bin/env python

Import("env")
Import("env_modules")

def copy_fbx_file(src_dir, dst_dir, src_name, dst_name=""):
    from shutil import copy

    src_path = os.path.join(Dir(src_dir).abspath, src_name)
    dst_dir = Dir(dst_dir).abspath

    if not os.path.isdir(dst_dir):
        os.makedirs(dst_dir)

    if dst_name:
        copy(src_path, os.path.join(dst_dir, dst_name))
    else:
        copy(src_path, dst_dir)
        
env_assimp = env_modules.Clone()

# Force bundled version for now, there's no released version of Assimp with
# support for ArmaturePopulate which we use from their master branch.
if True:  # env['builtin_assimp']:
    thirdparty_dir = "#thirdparty/assimp"

    env_assimp.Prepend(CPPPATH=["#thirdparty/assimp"])
    env_assimp.Prepend(CPPPATH=["#thirdparty/assimp/code"])
    env_assimp.Prepend(CPPPATH=["#thirdparty/assimp/include"])
    env_assimp.Prepend(CPPPATH=["#thirdparty/FBX/2018.1.1/include"])
    
            
    # env_assimp.Append(CPPDEFINES=['ASSIMP_DOUBLE_PRECISION']) # TODO default to what godot is compiled with for future double support
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_SINGLETHREADED"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_BOOST_WORKAROUND"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_OWN_ZLIB"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_EXPORT"])

    # Importers we don't need
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_3D_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_3DS_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_3MF_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_AC_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_AMF_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_ASE_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_ASSBIN_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_B3D_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_BLEND_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_BVH_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_C4D_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_COB_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_COLLADA_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_CSM_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_DXF_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_GLTF2_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_GLTF_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_HMP_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_IFC_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_IRR_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_IRRMESH_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_LWO_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_LWS_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_M3D_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_MD2_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_MD3_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_MD5_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_MD5_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_MDC_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_MDL_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_MMD_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_MS3D_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_NDO_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_NFF_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_OBJ_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_OFF_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_OGRE_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_OPENGEX_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_PLY_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_Q3BSP_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_Q3D_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_RAW_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_SIB_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_SMD_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_STEP_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_STL_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_TERRAGEN_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_X3D_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_XGL_IMPORTER"])
    env_assimp.Append(CPPDEFINES=["ASSIMP_BUILD_NO_X_IMPORTER"])
            
    if env["platform"] == "windows":
        env_assimp.Append(CPPDEFINES=["PLATFORM_WINDOWS"])
        env_assimp.Append(CPPDEFINES=["FBXSDK_SHARED"])
        env_assimp.Append(CPPDEFINES=[("PLATFORM", "WINDOWS")])
        fbx_path = Dir("#thirdparty/FBX/2018.1.1/lib/vs2015/x64/").abspath + "/" + env["target"] + "/libfbxsdk-mt.lib"
        fbx_dll_path = Dir("#thirdparty/FBX/2018.1.1/lib/vs2015/x64/").abspath + "/" + env["target"] + "/libfbxsdk.dll"
        copy_fbx_file(fbx_dll_path, "#bin")
        env.Append(LINKFLAGS=fbx_path)
        print("process windows fbx!!!!!!!")
    elif env["platform"] == "x11":
        env_assimp.Append(CPPDEFINES=["PLATFORM_LINUX"])
        env_assimp.Append(CPPDEFINES=[("PLATFORM", "LINUX")])
        fbx_path = Dir("#thirdparty/FBX/2018.1.1/lib/gcc4/x86_64-unknown-linux-gnu/").abspath + "/" + env["target"] + "/libfbxsdk.a"
        env.Append(LINKFLAGS=fbx_path)
        print("process x11 fbx!!!!!!!")
    elif env["platform"] == "osx":
        env_assimp.Append(CPPDEFINES=["PLATFORM_DARWIN"])
        env_assimp.Append(CPPDEFINES=[("PLATFORM", "DARWIN")])
        fbx_path = Dir("#thirdparty/FBX/2018.1.1/lib/clang/").abspath +"/" + env["target"] + "/libfbxsdk.a"
        env.Append(LINKFLAGS=fbx_path)
        print("process osx fbx!!!!!!!" + fbx_path)

    env_thirdparty = env_assimp.Clone()
    env_thirdparty.disable_warnings()
    env_thirdparty.add_source_files(env.modules_sources, Glob("#thirdparty/assimp/code/CApi/*.cpp"))
    env_thirdparty.add_source_files(env.modules_sources, Glob("#thirdparty/assimp/code/Common/*.cpp"))
    env_thirdparty.add_source_files(env.modules_sources, Glob("#thirdparty/assimp/code/PostProcessing/*.cpp"))
    env_thirdparty.add_source_files(env.modules_sources, Glob("#thirdparty/assimp/code/Material/*.cpp"))
    env_thirdparty.add_source_files(env.modules_sources, Glob("#thirdparty/assimp/code/FBX/*.cpp"))

# Godot's own source files
env_assimp.add_source_files(env.modules_sources, "parsers/*.cpp")
env_assimp.add_source_files(env.modules_sources, "*.cpp")
